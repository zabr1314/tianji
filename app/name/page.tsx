'use client'

import { useState } from 'react'
import Image from 'next/image'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { DateSelector } from '@/components/ui/date-selector'
import { TimeSelector } from '@/components/ui/time-selector'
import { CitySelector } from '@/components/ui/city-selector'
import { User, Sparkles, RefreshCw, BookOpen, Star, TrendingUp, TrendingDown, Minus, Download, Share2, Copy, Check } from 'lucide-react'
import Link from 'next/link'

interface NameAnalysisResult {
  success: boolean
  name: string
  analysis_type: 'current' | 'suggestion'
  basic_info: {
    surname: string
    given_name: string
    total_strokes: number
    surname_strokes: number
    given_strokes: number
  }
  wuxing_analysis: {
    surname_wuxing: string
    given_wuxing: string[]
    overall_wuxing: string
    wuxing_balance: {
      wood: number
      fire: number
      earth: number
      metal: number
      water: number
    }
    wuxing_compatibility: string
  }
  numerology: {
    tiange: number
    dige: number
    renge: number
    waige: number
    zongge: number
    tiange_fortune: string
    dige_fortune: string
    renge_fortune: string
    waige_fortune: string
    zongge_fortune: string
  }
  phonetics: {
    tones: number[]
    tone_harmony: string
    pronunciation_difficulty: string
    rhyme_quality: string
  }
  meanings: {
    positive_meanings: string[]
    potential_issues: string[]
    cultural_connotations: string[]
  }
  scores: {
    wuxing_score: number
    numerology_score: number
    phonetic_score: number
    meaning_score: number
    overall_score: number
  }
  suggestions: {
    strengths: string[]
    weaknesses: string[]
    improvement_suggestions: string[]
    lucky_directions: string[]
    suitable_careers: string[]
  }
  ai_analysis: string
  cost: number
  error?: string
}

export default function NameAnalysisPage() {
  const [formData, setFormData] = useState({
    name: '',
    analysis_type: 'current' as 'current' | 'suggestion',
    birth_date: '',
    birth_time: '',
    birth_city: '',
    gender: 'male' as 'male' | 'female'
  })

  const [result, setResult] = useState<NameAnalysisResult | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isSaving, setIsSaving] = useState(false)
  const [isSharing, setIsSharing] = useState(false)
  const [copied, setCopied] = useState(false)
  const [shareImageUrl, setShareImageUrl] = useState<string | null>(null)
  const [showShareImage, setShowShareImage] = useState(false)

  const validateForm = (): boolean => {
    const { name } = formData
    if (!name) {
      setError('ËØ∑ËæìÂÖ•Ë¶ÅÂàÜÊûêÁöÑÂßìÂêç')
      return false
    }
    if (name.length < 2 || name.length > 4) {
      setError('ÂßìÂêçÈïøÂ∫¶Â∫î‰∏∫2-4‰∏™Ê±âÂ≠ó')
      return false
    }
    const chineseRegex = /^[\u4e00-\u9fa5]+$/
    if (!chineseRegex.test(name)) {
      setError('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑ‰∏≠ÊñáÂßìÂêç')
      return false
    }
    return true
  }

  const handleAnalyze = async () => {
    if (!validateForm()) return

    setIsAnalyzing(true)
    setError(null)
    setResult(null)

    try {
      const requestData = {
        name: formData.name,
        analysis_type: formData.analysis_type,
        ...(formData.birth_date && { birth_date: formData.birth_date }),
        ...(formData.birth_time && { birth_time: formData.birth_time }),
        ...(formData.birth_city && { birth_city: formData.birth_city }),
        ...(formData.birth_date && { gender: formData.gender })
      }

      const response = await fetch('/api/name/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'ÂßìÂêçÂàÜÊûêÂ§±Ë¥•')
      }

      setResult(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'ÁΩëÁªúÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØï')
    } finally {
      setIsAnalyzing(false)
    }
  }

  const handleReset = () => {
    setResult(null)
    setError(null)
    setShareImageUrl(null)
    setShowShareImage(false)
  }

  // ‰øùÂ≠òÂßìÂêçÂàÜÊûêÊä•Âëä
  const handleSaveReport = async () => {
    if (!result) return
    
    setIsSaving(true)
    try {
      // ÁîüÊàêÊä•ÂëäÂÜÖÂÆπ
      const reportContent = generateNameReportContent(result)
      
      // ÂàõÂª∫Âπ∂‰∏ãËΩΩÊñá‰ª∂
      const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `ÂßìÂêçÂàÜÊûêÊä•Âëä_${result.name}_${new Date().toLocaleDateString('zh-CN').replace(/\//g, '-')}.txt`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('‰øùÂ≠òÊä•ÂëäÂ§±Ë¥•:', error)
      alert('‰øùÂ≠òÊä•ÂëäÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï')
    } finally {
      setIsSaving(false)
    }
  }

  // ÂàÜ‰∫´ÂßìÂêçÂàÜÊûêÁªìÊûú
  const handleShareResult = async () => {
    if (!result) return
    
    setIsSharing(true)
    try {
      // ÁîüÊàêÂàÜ‰∫´ÂõæÁâá
      const shareImageBlob = await generateNameShareImage(result)
      
      if (shareImageBlob) {
        // ÂàõÂª∫ÂõæÁâáURLÁî®‰∫éÈ°µÈù¢ÊòæÁ§∫
        const imageUrl = URL.createObjectURL(shareImageBlob)
        setShareImageUrl(imageUrl)
        setShowShareImage(true)
      } else {
        // ÈôçÁ∫ßÊñπÊ°àÔºöÊñáÊú¨ÂàÜ‰∫´
        const shareText = `üìù ÊàëÂú®Â§©Êú∫AIÂÆåÊàê‰∫ÜÂßìÂêçÂàÜÊûêÔºÅ
üë§ ÂßìÂêçÔºö${result.name}
üíØ ÁªºÂêàËØÑÂàÜÔºö${result.scores.overall_score}ÂàÜ
‚ú® Â§©Êú∫AI‰∏∫ÊàëÊè≠Á§∫‰∫ÜÂßìÂêç‰∏≠ÁöÑÂ••Áßò
üåü Êù•‰ΩìÈ™å‰∏ì‰∏öÁöÑÂßìÂêçÂàÜÊûêÂêßÔºÅ
#Â§©Êú∫AI #ÂßìÂêçÂàÜÊûê #ÂßìÂêçÂ≠¶`
        
        if (navigator.share) {
          await navigator.share({
            title: 'ÊàëÁöÑÂßìÂêçÂàÜÊûêÊä•Âëä',
            text: shareText,
            url: window.location.href
          })
        } else {
          await navigator.clipboard.writeText(shareText)
          setCopied(true)
          setTimeout(() => setCopied(false), 2000)
        }
      }
    } catch (error) {
      console.error('ÂàÜ‰∫´Â§±Ë¥•:', error)
      try {
        const shareText = `Â§©Êú∫AI - ${result.name} ÂßìÂêçÂàÜÊûê\n\nÁªºÂêàËØÑÂàÜÔºö${result.scores.overall_score}ÂàÜ\n\nÊü•ÁúãËØ¶ÊÉÖÔºö${window.location.href}`
        await navigator.clipboard.writeText(shareText)
        setCopied(true)
        setTimeout(() => setCopied(false), 2000)
      } catch (clipboardError) {
        alert('ÂàÜ‰∫´Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï')
      }
    } finally {
      setIsSharing(false)
    }
  }

  // ÂÖ≥Èó≠ÂàÜ‰∫´ÂõæÁâáÊòæÁ§∫
  const handleCloseShareImage = () => {
    setShowShareImage(false)
    if (shareImageUrl) {
      URL.revokeObjectURL(shareImageUrl)
      setShareImageUrl(null)
    }
  }

  // ‰∏ãËΩΩÂàÜ‰∫´ÂõæÁâá
  const handleDownloadShareImage = () => {
    if (!shareImageUrl) return
    
    const a = document.createElement('a')
    a.href = shareImageUrl
    a.download = `ÂßìÂêçÂàÜÊûêÂàÜ‰∫´_${result?.name}_${new Date().toLocaleDateString('zh-CN').replace(/\//g, '-')}.png`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
  }

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600'
    if (score >= 60) return 'text-blue-600'
    if (score >= 40) return 'text-yellow-600'
    return 'text-red-600'
  }

  const getScoreIcon = (score: number) => {
    if (score >= 60) return <TrendingUp className="h-4 w-4" />
    if (score >= 40) return <Minus className="h-4 w-4" />
    return <TrendingDown className="h-4 w-4" />
  }

  const getFortuneColor = (fortune: string) => {
    if (fortune === 'Â§ßÂêâ') return 'text-green-600 bg-green-50'
    if (fortune === 'Âêâ') return 'text-blue-600 bg-blue-50'
    if (fortune === 'ÂçäÂêâ') return 'text-yellow-600 bg-yellow-50'
    return 'text-red-600 bg-red-50'
  }

  const getWuxingColor = (wuxing: string) => {
    const colors = {
      'Êú®': 'bg-green-100 text-green-800',
      'ÁÅ´': 'bg-red-100 text-red-800',
      'Âúü': 'bg-yellow-100 text-yellow-800',
      'Èáë': 'bg-gray-100 text-gray-800',
      'Ê∞¥': 'bg-blue-100 text-blue-800'
    }
    return colors[wuxing as keyof typeof colors] || 'bg-gray-100 text-gray-800'
  }

  // Ê∏≤Êüì‰º†ÁªüÈ£éÊ†ºÁöÑAIÂÜÖÂÆπÔºàÁ±ª‰ººÂÖ´Â≠óÂàÜÊûêÔºâ
  const renderTraditionalAIContent = (content: string) => {
    // Ëß£Êûê„Äê„ÄëÊ†áËÆ∞ÁöÑÂÜÖÂÆπ
    const sections = content.split(/„Äê([^„Äë]+)„Äë/).filter(item => item.trim())
    const sectionData: Array<{title: string, content: string}> = []
    
    for (let i = 0; i < sections.length; i += 2) {
      if (i + 1 < sections.length) {
        const title = sections[i]
        const content = sections[i + 1]
        sectionData.push({ title, content })
      }
    }

    if (sectionData.length === 0) {
      // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞„Äê„ÄëÊ†áËÆ∞ÔºåÂ∞±‰Ωú‰∏∫ÊôÆÈÄöÊñáÊú¨Â§ÑÁêÜ
      return (
        <div className="prose prose-sm max-w-none">
          {content.split('\n').filter(paragraph => paragraph.trim()).map((paragraph, index) => (
            <p key={index} className="text-sm leading-relaxed mb-4 text-slate-700 dark:text-slate-300">
              {paragraph.trim()}
            </p>
          ))}
        </div>
      )
    }

    return (
      <div className="space-y-6">
        {sectionData.map((section, index) => (
          <div key={index}>
            {renderTraditionalAIBlock(section.title, section.content)}
          </div>
        ))}
      </div>
    )
  }

  // Ê∏≤Êüì‰º†ÁªüÈ£éÊ†ºÁöÑAIÂàÜÊûêÂùó
  const renderTraditionalAIBlock = (title: string, content: string) => {
    return (
      <div className="bg-white dark:bg-slate-900 rounded-lg p-6 border border-slate-200 dark:border-slate-700">
        <div className="mb-4">
          <h4 className="text-base font-serif font-semibold text-slate-800 dark:text-slate-200 mb-2">
            {title}
          </h4>
          <div className="w-12 h-px bg-slate-400 dark:bg-slate-500"></div>
        </div>
        <div className="text-sm leading-relaxed text-slate-700 dark:text-slate-300 space-y-3">
          {content.split('\n').filter(paragraph => paragraph.trim()).map((paragraph, index) => (
            <p key={index} className="text-sm leading-relaxed">
              {paragraph.trim()}
            </p>
          ))}
        </div>
      </div>
    )
  }

  // ÁîüÊàêÂßìÂêçÂàÜÊûêÊä•ÂëäÂÜÖÂÆπ
  const generateNameReportContent = (data: NameAnalysisResult): string => {
    const date = new Date().toLocaleDateString('zh-CN')
    return `
==============================
          ÂßìÂêçÂàÜÊûêÊä•Âëä
==============================

ÁîüÊàêÊó∂Èó¥Ôºö${date}
ÂßìÂêçÔºö${data.name}
ÂàÜÊûêÁ±ªÂûãÔºö${data.analysis_type === 'current' ? 'Áé∞ÊúâÂßìÂêçÂàÜÊûê' : 'ÊîπÂêçÂª∫ËÆÆ'}

==============================
           Âü∫Êú¨‰ø°ÊÅØ
==============================
ÂßìÊ∞èÔºö${data.basic_info.surname} (${data.basic_info.surname_strokes}Áîª)
ÂêçÂ≠óÔºö${data.basic_info.given_name} (${data.basic_info.given_strokes}Áîª)
ÊÄªÁ¨îÁîªÔºö${data.basic_info.total_strokes}Áîª

==============================
           ‰∫îË°åÂàÜÊûê
==============================
ÂßìÊ∞è‰∫îË°åÔºö${data.wuxing_analysis.surname_wuxing}
ÂêçÂ≠ó‰∫îË°åÔºö${data.wuxing_analysis.given_wuxing.join('„ÄÅ')}
Êï¥‰Ωì‰∫îË°åÔºö${data.wuxing_analysis.overall_wuxing}
‰∫îË°åÈÖçÁΩÆÔºö${data.wuxing_analysis.wuxing_compatibility}

‰∫îË°åÂàÜÂ∏ÉÔºö
Êú®Ôºö${data.wuxing_analysis.wuxing_balance.wood}
ÁÅ´Ôºö${data.wuxing_analysis.wuxing_balance.fire}
ÂúüÔºö${data.wuxing_analysis.wuxing_balance.earth}
ÈáëÔºö${data.wuxing_analysis.wuxing_balance.metal}
Ê∞¥Ôºö${data.wuxing_analysis.wuxing_balance.water}

==============================
           Êï∞ÁêÜÂàÜÊûê
==============================
Â§©Ê†ºÔºö${data.numerology.tiange} (${data.numerology.tiange_fortune})
‰∫∫Ê†ºÔºö${data.numerology.renge} (${data.numerology.renge_fortune})
Âú∞Ê†ºÔºö${data.numerology.dige} (${data.numerology.dige_fortune})
Â§ñÊ†ºÔºö${data.numerology.waige} (${data.numerology.waige_fortune})
ÊÄªÊ†ºÔºö${data.numerology.zongge} (${data.numerology.zongge_fortune})

==============================
           Èü≥ÈüµÂàÜÊûê
==============================
Â£∞Ë∞ÉÁªÑÂêàÔºö${data.phonetics.tones.join('-')}
Èü≥ÈüµÂíåË∞êÂ∫¶Ôºö${data.phonetics.tone_harmony}
ÂèëÈü≥ÈöæÂ∫¶Ôºö${data.phonetics.pronunciation_difficulty}
ÈüµÂæãË¥®ÈáèÔºö${data.phonetics.rhyme_quality}

==============================
           Â≠ó‰πâÂàÜÊûê
==============================
ÁßØÊûÅÂê´‰πâÔºö
${data.meanings.positive_meanings.map(meaning => `‚Ä¢ ${meaning}`).join('\n')}

ÊΩúÂú®ÈóÆÈ¢òÔºö
${data.meanings.potential_issues.map(issue => `‚Ä¢ ${issue}`).join('\n')}

ÊñáÂåñÂÜÖÊ∂µÔºö
${data.meanings.cultural_connotations.map(connotation => `‚Ä¢ ${connotation}`).join('\n')}

==============================
           ÁªºÂêàËØÑÂàÜ
==============================
‰∫îË°åËØÑÂàÜÔºö${data.scores.wuxing_score}ÂàÜ
Êï∞ÁêÜËØÑÂàÜÔºö${data.scores.numerology_score}ÂàÜ
Èü≥ÈüµËØÑÂàÜÔºö${data.scores.phonetic_score}ÂàÜ
Â≠ó‰πâËØÑÂàÜÔºö${data.scores.meaning_score}ÂàÜ
ÁªºÂêàËØÑÂàÜÔºö${data.scores.overall_score}ÂàÜ

==============================
           ‰∏ì‰∏öÂª∫ËÆÆ
==============================
‰ºòÂäøÁâπÁÇπÔºö
${data.suggestions.strengths.map(strength => `‚Ä¢ ${strength}`).join('\n')}

Ê≥®ÊÑè‰∫ãÈ°πÔºö
${data.suggestions.weaknesses.map(weakness => `‚Ä¢ ${weakness}`).join('\n')}

ÊîπÂñÑÂª∫ËÆÆÔºö
${data.suggestions.improvement_suggestions.map(suggestion => `‚Ä¢ ${suggestion}`).join('\n')}

ÂêâÂà©Êñπ‰ΩçÔºö
${data.suggestions.lucky_directions.map(direction => `‚Ä¢ ${direction}`).join('\n')}

ÈÄÇÂêàËÅå‰∏öÔºö
${data.suggestions.suitable_careers.map(career => `‚Ä¢ ${career}`).join('\n')}

==============================
          AIÊ∑±Â∫¶Ëß£ËØª
==============================
${data.ai_analysis}

==============================
Êú¨Ê¨°ÂàÜÊûêÊ∂àËÄóÔºö${data.cost} Â§©Êú∫ÁÇπ
Êä•ÂëäÁî±Â§©Êú∫AIÁîüÊàê - ‰ªÖ‰æõÂèÇËÄÉ
==============================`
  }

  // ÁîüÊàêÂàÜ‰∫´ÂõæÁâá
  const generateNameShareImage = async (data: NameAnalysisResult): Promise<Blob | null> => {
    try {
      // Âä®ÊÄÅÂØºÂÖ•html2canvas
      const html2canvas = await import('html2canvas').then(module => module.default)
      
      // ÂàõÂª∫ÂàÜ‰∫´ÂÜÖÂÆπÂÖÉÁ¥†
      const shareElement = document.createElement('div')
      shareElement.style.cssText = `
        width: 450px;
        height: 800px;
        background: linear-gradient(135deg, #fef7ed 0%, #fed7aa 50%, #fdba74 100%);
        font-family: serif;
        position: fixed;
        top: -9999px;
        left: -9999px;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      `
      
      shareElement.innerHTML = `
        <div style="padding: 32px 24px; height: 100%; display: flex; flex-direction: column; color: #8b4513;">
          <!-- Ê†áÈ¢òÂå∫Âüü -->
          <div style="text-align: center; margin-bottom: 24px;">
            <div style="background: #dc2626; color: white; display: inline-block; padding: 12px 20px; border-radius: 8px; font-size: 20px; font-weight: bold; margin-bottom: 8px;">
              ÊàëÁöÑÂßìÂêçÂàÜÊûêÊä•Âëä
            </div>
            <div style="font-size: 14px; color: #a16207;">Â§©Êú∫AI ¬∑ ÂßìÂêçÂ≠¶Ëß£ËØª</div>
          </div>
          
          <!-- ÂßìÂêçÂ±ïÁ§∫ -->
          <div style="background: rgba(255,255,255,0.9); border-radius: 12px; padding: 20px; margin-bottom: 16px; border: 2px solid #f59e0b; text-align: center;">
            <div style="font-size: 32px; font-weight: bold; color: #dc2626; margin-bottom: 8px;">
              ${data.name}
            </div>
            <div style="font-size: 12px; color: #7c2d12;">
              ÊÄªÁ¨îÁîªÔºö${data.basic_info.total_strokes}Áîª | ‰∫îË°åÔºö${data.wuxing_analysis.overall_wuxing}
            </div>
          </div>
          
          <!-- ÁªºÂêàËØÑÂàÜ -->
          <div style="background: rgba(255,255,255,0.8); border-radius: 12px; padding: 16px; margin-bottom: 16px; border: 2px solid #f59e0b; text-align: center;">
            <div style="font-size: 48px; font-weight: bold; color: ${data.scores.overall_score >= 80 ? '#059669' : data.scores.overall_score >= 60 ? '#2563eb' : data.scores.overall_score >= 40 ? '#d97706' : '#dc2626'}; margin-bottom: 8px;">
              ${data.scores.overall_score}
            </div>
            <div style="font-size: 14px; color: #7c2d12; font-weight: bold;">ÁªºÂêàËØÑÂàÜ</div>
          </div>
          
          <!-- Êï∞ÁêÜÂàÜÊûê -->
          <div style="background: rgba(255,255,255,0.8); border-radius: 12px; padding: 16px; margin-bottom: 16px; border: 2px solid #f59e0b;">
            <div style="display: flex; align-items: center; margin-bottom: 12px;">
              <span style="font-size: 16px;">üìä</span>
              <span style="font-weight: bold; margin-left: 8px; font-size: 14px;">Êï∞ÁêÜÊ†ºÂ±Ä</span>
            </div>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 11px;">
              <div>Â§©Ê†ºÔºö${data.numerology.tiange} (${data.numerology.tiange_fortune})</div>
              <div>‰∫∫Ê†ºÔºö${data.numerology.renge} (${data.numerology.renge_fortune})</div>
              <div>Âú∞Ê†ºÔºö${data.numerology.dige} (${data.numerology.dige_fortune})</div>
              <div>ÊÄªÊ†ºÔºö${data.numerology.zongge} (${data.numerology.zongge_fortune})</div>
            </div>
          </div>
          
          <!-- ÁâπÁÇπ‰ºòÂäø -->
          <div style="background: rgba(255,255,255,0.8); border-radius: 12px; padding: 16px; margin-bottom: 20px; border: 2px solid #f59e0b; flex: 1;">
            <div style="display: flex; align-items: center; margin-bottom: 12px;">
              <span style="font-size: 16px;">‚ú®</span>
              <span style="font-weight: bold; margin-left: 8px; font-size: 14px;">ÂßìÂêçÁâπÁÇπ</span>
            </div>
            <div style="font-size: 11px; line-height: 1.5; color: #7c2d12;">
              ${data.suggestions.strengths.slice(0, 2).join('Ôºõ').length > 80 ? data.suggestions.strengths.slice(0, 2).join('Ôºõ').substring(0, 80) + '...' : data.suggestions.strengths.slice(0, 2).join('Ôºõ')}
            </div>
          </div>
          
          <!-- Â∫ïÈÉ®Ë£ÖÈ•∞ -->
          <div style="text-align: center; padding-top: 16px; border-top: 2px solid #f59e0b;">
            <div style="font-size: 12px; color: #a16207; font-weight: bold;">Êâ´Á†Å‰ΩìÈ™å‰∏ì‰∏öÁöÑÂßìÂêçÂàÜÊûê</div>
          </div>
        </div>
      `
      
      document.body.appendChild(shareElement)
      
      // ‰ΩøÁî®html2canvasÁîüÊàêÂõæÁâá
      const canvas = await html2canvas(shareElement, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#fef7ed',
        width: 450,
        height: 800,
        scrollX: 0,
        scrollY: 0,
        windowWidth: 450,
        windowHeight: 800
      })
      
      document.body.removeChild(shareElement)
      
      // ËΩ¨Êç¢‰∏∫Blob
      return new Promise((resolve) => {
        canvas.toBlob(resolve, 'image/png')
      })
    } catch (error) {
      console.error('ÁîüÊàêÂàÜ‰∫´ÂõæÁâáÂ§±Ë¥•:', error)
      return null
    }
  }

  return (
    <div className="min-h-screen relative overflow-hidden" style={{
      background: `linear-gradient(45deg, 
        #fef7ed 0%, 
        #fef3e2 25%, 
        #fdf4ff 50%, 
        #fff7ed 75%, 
        #fef3e2 100%)`
    }}>
      {/* ÂÆã‰ª£ÁæéÂ≠¶ËÉåÊôØË£ÖÈ•∞ */}
      <div className="absolute inset-0 opacity-40 dark:opacity-20">
        <div className="absolute top-32 left-32 w-32 h-32 border-2 border-slate-300 dark:border-slate-600 rounded-full opacity-50"></div>
        <div className="absolute bottom-40 right-32 w-24 h-24 border border-slate-400 dark:border-slate-500 rounded-full opacity-60"></div>
        <div className="absolute top-1/2 left-1/4 w-4 h-4 bg-slate-300 dark:bg-slate-600 rounded-full opacity-40"></div>
        <div className="absolute top-1/4 right-1/3 w-2 h-2 bg-amber-400 dark:bg-amber-600 rounded-full opacity-50"></div>
      </div>
      
      <div className="relative z-10">
        <main className="container mx-auto px-4 py-8">
          <div className="max-w-6xl mx-auto">

          {!result && !isAnalyzing && (
            <>
              {/* È°µÈù¢‰ªãÁªç - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <section className="text-center mb-12">
                <div className="max-w-4xl mx-auto">
                  <h2 className="text-5xl font-serif font-bold mb-6 text-slate-800 dark:text-slate-200">
                    ÂßìÂêçÂ≠¶ÂàÜÊûê
                  </h2>
                  <div className="w-24 h-px bg-slate-300 dark:bg-slate-600 mx-auto mb-6"></div>
                  <p className="text-xl font-serif leading-relaxed text-slate-700 dark:text-slate-300 max-w-3xl mx-auto mb-8">
                    Âü∫‰∫é‰º†ÁªüÂßìÂêçÂ≠¶ÁêÜËÆ∫ÔºåÂàÜÊûêÂßìÂêçÁöÑ‰∫îË°åÈÖçÁΩÆ„ÄÅÊï∞ÁêÜÂêâÂá∂„ÄÅÈü≥ÈüµÁâπÁÇπÁ≠â„ÄÇ
                    ‰∏∫ÊÇ®Êèê‰æõ‰∏ì‰∏öÁöÑÂßìÂêçËØÑ‰ª∑ÂíåÊîπÂêçÂª∫ËÆÆÔºåÂä©ÊÇ®ÈÄâÊã©ÊúÄÈÄÇÂêàÁöÑÂ•ΩÂêçÂ≠ó„ÄÇ
                  </p>
                  <div className="flex justify-center items-center space-x-6 text-sm text-muted-foreground">
                    <div className="flex items-center space-x-2">
                      <User className="h-4 w-4" />
                      <span>‰∫îË°åÂàÜÊûê</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Star className="h-4 w-4" />
                      <span>Êï∞ÁêÜÂêâÂá∂</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Sparkles className="h-4 w-4" />
                      <span>AIÊô∫ËÉΩËß£ËØª</span>
                    </div>
                  </div>
                </div>
              </section>

              {/* ËæìÂÖ•Ë°®Âçï - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <section className="mb-12">
                <Card className="max-w-4xl mx-auto shadow-lg border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                  <CardHeader className="text-center">
                    <CardTitle className="text-2xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                      ÂßìÂêçÂàÜÊûê
                    </CardTitle>
                    <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto mb-2"></div>
                    <CardDescription className="text-base font-serif text-slate-600 dark:text-slate-400">
                      ËØ∑ËæìÂÖ•Ë¶ÅÂàÜÊûêÁöÑÂßìÂêçÔºåÈÄâÊã©ÂàÜÊûêÁ±ªÂûã
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {/* Âü∫Êú¨‰ø°ÊÅØ */}
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <h3 className="font-semibold font-serif text-slate-700 dark:text-slate-300">Âü∫Êú¨‰ø°ÊÅØ</h3>
                        
                        <div>
                          <Label htmlFor="name">ÂßìÂêç *</Label>
                          <Input
                            id="name"
                            placeholder="ËØ∑ËæìÂÖ•‰∏≠ÊñáÂßìÂêçÔºà2-4‰∏™Â≠óÔºâ"
                            value={formData.name}
                            onChange={(e) => setFormData({...formData, name: e.target.value})}
                            maxLength={4}
                          />
                          <p className="text-xs text-muted-foreground mt-1">
                            ‰ªÖÊîØÊåÅ‰∏≠ÊñáÂßìÂêçÔºåÈïøÂ∫¶2-4‰∏™Ê±âÂ≠ó
                          </p>
                        </div>

                        <div>
                          <Label htmlFor="analysis-type">ÂàÜÊûêÁ±ªÂûã *</Label>
                          <Select value={formData.analysis_type} onValueChange={(value: 'current' | 'suggestion') => setFormData({...formData, analysis_type: value})}>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="current">Áé∞ÊúâÂßìÂêçÂàÜÊûê</SelectItem>
                              <SelectItem value="suggestion">Ëµ∑ÂêçÂª∫ËÆÆÂàÜÊûê</SelectItem>
                            </SelectContent>
                          </Select>
                          <p className="text-xs text-muted-foreground mt-1">
                            ÈÄâÊã©ÊòØÂàÜÊûêÁé∞ÊúâÂßìÂêçËøòÊòØËµ∑ÂêçÂèÇËÄÉ
                          </p>
                        </div>
                      </div>

                      <div className="space-y-4">
                        <h3 className="font-semibold font-serif text-slate-700 dark:text-slate-300">ÁîüËæ∞‰ø°ÊÅØÔºàÂèØÈÄâÔºâ</h3>
                        <p className="text-sm font-serif text-slate-600 dark:text-slate-400">
                          Â°´ÂÜôÁîüËæ∞‰ø°ÊÅØÂèØËé∑ÂæóÊõ¥Á≤æÂáÜÁöÑ‰∫îË°åÈÖçÁΩÆÂàÜÊûê
                        </p>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <DateSelector
                            label="Âá∫ÁîüÊó•Êúü"
                            value={formData.birth_date}
                            onChange={(value) => setFormData({...formData, birth_date: value})}
                            placeholder="ËØ∑ÈÄâÊã©Âá∫ÁîüÊó•Êúü"
                          />
                          <div>
                            <Label htmlFor="gender">ÊÄßÂà´</Label>
                            <Select value={formData.gender} onValueChange={(value: 'male' | 'female') => setFormData({...formData, gender: value})}>
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="male">Áî∑</SelectItem>
                                <SelectItem value="female">Â•≥</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>

                        <TimeSelector
                          label="Âá∫ÁîüÊó∂Èó¥"
                          value={formData.birth_time}
                          onChange={(value) => setFormData({...formData, birth_time: value})}
                          placeholder="ËØ∑ÈÄâÊã©Âá∫ÁîüÊó∂Èó¥"
                        />

                        <CitySelector
                          label="Âá∫ÁîüÂüéÂ∏Ç"
                          value={formData.birth_city}
                          onChange={(value) => setFormData({...formData, birth_city: value})}
                          placeholder="ËØ∑ÈÄâÊã©Âá∫ÁîüÂüéÂ∏Ç"
                        />
                      </div>
                    </div>

                    {/* ÂàÜÊûêÊåâÈíÆ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
                    <div className="text-center pt-4">
                      <Button 
                        onClick={handleAnalyze}
                        size="lg"
                        className="bg-slate-700 dark:bg-slate-600 hover:bg-slate-800 dark:hover:bg-slate-700 text-white font-serif px-12 shadow-lg"
                        disabled={isAnalyzing}
                      >
                        {isAnalyzing ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                            <span className="font-serif">ÂàÜÊûê‰∏≠...</span>
                          </>
                        ) : (
                          <>
                            <User className="w-4 h-4 mr-2" />
                            <span className="font-serif">ÂºÄÂßãÂàÜÊûê (Ê∂àËÄó 120 Â§©Êú∫ÁÇπ)</span>
                          </>
                        )}
                      </Button>
                      <p className="text-sm font-serif text-slate-600 dark:text-slate-400 mt-2">
                        ÂßìÂêçÂàÜÊûêÂÆåÊàêÂêéÂ∞ÜÊ∂àËÄó 120 Â§©Êú∫ÁÇπ
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </section>
            </>
          )}

          {/* ÂàÜÊûê‰∏≠Áä∂ÊÄÅ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
          {isAnalyzing && (
            <section className="text-center py-16">
              <Card className="max-w-2xl mx-auto border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardContent className="pt-12 pb-12">
                  <div className="flex flex-col items-center space-y-6">
                    <div className="relative">
                      <div className="animate-spin rounded-full h-16 w-16 border-4 border-slate-600 border-t-transparent"></div>
                      <User className="absolute inset-0 m-auto h-6 w-6 text-slate-600" />
                    </div>
                    <div className="text-center">
                      <h3 className="text-xl font-serif font-semibold mb-2 text-slate-700 dark:text-slate-300">Ê≠£Âú®ÂàÜÊûêÂßìÂêç...</h3>
                      <p className="text-base font-serif text-slate-600 dark:text-slate-400 mb-4">
                        AIÊ≠£Âú®ÂàÜÊûêÂßìÂêçÁöÑ‰∫îË°åÈÖçÁΩÆ„ÄÅÊï∞ÁêÜÂêâÂá∂ÂíåÈü≥ÈüµÁâπÁÇπ
                      </p>
                      <div className="flex flex-wrap justify-center gap-2">
                        <Badge variant="secondary" className="bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 font-serif">‰∫îË°åÂàÜÊûê</Badge>
                        <Badge variant="secondary" className="bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 font-serif">Á¨îÁîªËÆ°ÁÆó</Badge>
                        <Badge variant="secondary" className="bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 font-serif">Êï∞ÁêÜÊ†ºÂ±Ä</Badge>
                        <Badge variant="secondary" className="bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 font-serif">Èü≥ÈüµÁâπÁÇπ</Badge>
                        <Badge variant="secondary" className="bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 font-serif">AIÊô∫ËÉΩËß£ËØª</Badge>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </section>
          )}

          {/* ÈîôËØØÊòæÁ§∫ */}
          {error && (
            <section className="text-center py-8">
              <Card className="max-w-2xl mx-auto border-red-200">
                <CardContent className="pt-6">
                  <div className="text-center text-red-600 mb-4">
                    <p className="text-lg font-semibold">{error}</p>
                  </div>
                  <Button onClick={() => setError(null)} variant="outline">
                    <RefreshCw className="h-4 w-4 mr-2" />
                    ÈáçÊñ∞ÂàÜÊûê
                  </Button>
                </CardContent>
              </Card>
            </section>
          )}

          {/* ÂàÜÊûêÁªìÊûú - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
          {result && (
            <section>
              <div className="text-center mb-8">
                <h3 className="text-3xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-4">ÂßìÂêçÂàÜÊûêÁªìÊûú</h3>
                <div className="w-24 h-px bg-slate-300 dark:bg-slate-600 mx-auto mb-6"></div>
                <Button onClick={handleReset} variant="outline" className="font-serif border-slate-300 dark:border-slate-600">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  ÂàÜÊûêÂÖ∂‰ªñÂßìÂêç
                </Button>
              </div>

              {/* ÂßìÂêçÂ±ïÁ§∫‰∏éÊ†∏ÂøÉ‰ø°ÊÅØ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 shadow-lg border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center pb-3">
                  <div className="text-sm font-serif text-slate-600 dark:text-slate-400 mb-1">
                    {result.analysis_type === 'current' ? 'Áé∞ÊúâÂßìÂêçÂàÜÊûê' : 'Ëµ∑ÂêçÂª∫ËÆÆÂàÜÊûê'}
                  </div>
                  <CardTitle className="text-3xl font-serif font-bold text-slate-800 dark:text-slate-200 mb-3">
                    {result.name}
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto mb-4"></div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="grid lg:grid-cols-2 gap-6">
                    {/* Â∑¶‰æßÔºöÂßìÂêçÁªìÊûÑÂàÜÊûê */}
                    <div className="space-y-4">
                      {/* ÂßìÂêçÊãÜËß£ */}
                      <div className="bg-slate-50/50 dark:bg-slate-800/50 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                        <div className="text-center mb-4">
                          <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300">ÂßìÂêçÁªìÊûÑ</h4>
                          <div className="w-12 h-px bg-slate-300 dark:bg-slate-600 mx-auto mt-2"></div>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          {/* ÂßìÊ∞è */}
                          <div className="text-center">
                            <div className="bg-white dark:bg-slate-900 p-3 rounded-lg border border-slate-200 dark:border-slate-700">
                              <div className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-1">
                                {result.basic_info.surname}
                              </div>
                              <div className="text-xs text-slate-500 dark:text-slate-400">ÂßìÊ∞è ¬∑ {result.basic_info.surname_strokes}Áîª</div>
                            </div>
                            <div className="mt-2">
                              <Badge className={getWuxingColor(result.wuxing_analysis.surname_wuxing)} variant="outline">
                                {result.wuxing_analysis.surname_wuxing}
                              </Badge>
                            </div>
                          </div>
                          {/* ÂêçÂ≠ó */}
                          <div className="text-center">
                            <div className="bg-white dark:bg-slate-900 p-3 rounded-lg border border-slate-200 dark:border-slate-700">
                              <div className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-1">
                                {result.basic_info.given_name}
                              </div>
                              <div className="text-xs text-slate-500 dark:text-slate-400">ÂêçÂ≠ó ¬∑ {result.basic_info.given_strokes}Áîª</div>
                            </div>
                            <div className="mt-2 flex justify-center space-x-1">
                              {result.wuxing_analysis.given_wuxing.map((wuxing, index) => (
                                <Badge key={index} className={getWuxingColor(wuxing)} variant="outline">
                                  {wuxing}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                        {/* ÊÄªÁ¨îÁîª */}
                        <div className="mt-4 text-center p-3 bg-slate-100 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
                          <div className="text-base font-serif text-slate-600 dark:text-slate-400">
                            ÊÄªÁ¨îÁîªÔºö<span className="font-bold text-slate-700 dark:text-slate-300">{result.basic_info.total_strokes}</span>Áîª
                          </div>
                          <div className="text-sm text-slate-500 dark:text-slate-400 mt-1">
                            Êï¥‰Ωì‰∫îË°åÔºö<Badge className={getWuxingColor(result.wuxing_analysis.overall_wuxing)} variant="outline">
                              {result.wuxing_analysis.overall_wuxing}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Âè≥‰æßÔºöÁªºÂêàËØÑÂàÜ‰∏éÊ†∏ÂøÉÊåáÊ†á */}
                    <div className="space-y-4">
                      {/* ÁªºÂêàËØÑÂàÜ */}
                      <div className="text-center bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <div className="text-5xl font-serif font-bold mb-3">
                          <span className={`${getScoreColor(result.scores.overall_score)} drop-shadow-sm`}>
                            {result.scores.overall_score}
                          </span>
                          <span className="text-2xl font-serif text-slate-500 dark:text-slate-400">ÂàÜ</span>
                        </div>
                        <Badge variant="secondary" className="bg-slate-700 dark:bg-slate-600 text-white font-serif px-3 py-1">
                          ÁªºÂêàËØÑ‰ª∑
                        </Badge>
                        <div className="mt-3 text-sm text-slate-600 dark:text-slate-400">
                          ‰∫îË°åÈÖçÂêàÔºö{result.wuxing_analysis.wuxing_compatibility}
                        </div>
                      </div>

                      {/* ÂêÑÈ°πËØÑÂàÜ */}
                      <div className="space-y-3">
                        {Object.entries(result.scores).filter(([key]) => key !== 'overall_score').map(([key, score]) => {
                          const labels = {
                            wuxing_score: '‰∫îË°åËØÑÂàÜ',
                            numerology_score: 'Êï∞ÁêÜËØÑÂàÜ',
                            phonetic_score: 'Èü≥ÈüµËØÑÂàÜ',
                            meaning_score: 'ÂØìÊÑèËØÑÂàÜ'
                          }
                          const icons = {
                            wuxing_score: '‚öä',
                            numerology_score: 'ÁÆó',
                            phonetic_score: 'Èü≥',
                            meaning_score: 'ÊÑè'
                          }
                          
                          return (
                            <div key={key} className="bg-white dark:bg-slate-900 p-3 rounded-lg border border-slate-200 dark:border-slate-700">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-2">
                                  <div className="w-6 h-6 bg-slate-100 dark:bg-slate-800 rounded flex items-center justify-center">
                                    <span className="text-xs font-serif font-bold text-slate-600 dark:text-slate-400">
                                      {icons[key as keyof typeof icons]}
                                    </span>
                                  </div>
                                  <span className="text-xs font-serif font-semibold text-slate-700 dark:text-slate-300">
                                    {labels[key as keyof typeof labels]}
                                  </span>
                                </div>
                                <div className="flex items-center space-x-1">
                                  {getScoreIcon(score)}
                                  <span className={`text-base font-serif font-bold ${getScoreColor(score)}`}>
                                    {score}
                                  </span>
                                </div>
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>


              {/* ‰∫îË°åÂàÜÊûê - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    ‰∫îË°åÈÖçÁΩÆÂàÜÊûê
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="grid lg:grid-cols-2 gap-8">
                    {/* Â∑¶‰æßÔºö‰∫îË°åÂàÜÂ∏É */}
                    <div className="space-y-6">
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">‰∫îË°åÂàÜÂ∏É</h4>
                        <div className="space-y-4">
                          {Object.entries(result.wuxing_analysis.wuxing_balance).map(([element, count]) => {
                            const elementNames = {
                              wood: 'Êú®', fire: 'ÁÅ´', earth: 'Âúü', metal: 'Èáë', water: 'Ê∞¥'
                            }
                            const elementColors = {
                              wood: 'bg-green-500',
                              fire: 'bg-red-500',
                              earth: 'bg-yellow-500',
                              metal: 'bg-gray-500',
                              water: 'bg-blue-500'
                            }
                            return (
                              <div key={element} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3">
                                  <div className={`w-6 h-6 rounded-full ${elementColors[element as keyof typeof elementColors]} border border-slate-300 dark:border-slate-600`}></div>
                                  <span className="text-sm font-serif text-slate-700 dark:text-slate-300">
                                    {elementNames[element as keyof typeof elementNames]}
                                  </span>
                                </div>
                                <div className="flex items-center space-x-3">
                                  <div className="w-20 bg-slate-200 dark:bg-slate-700 rounded-full h-2">
                                    <div 
                                      className={`h-2 rounded-full ${elementColors[element as keyof typeof elementColors]}`}
                                      style={{width: `${Math.min(count * 20, 100)}%`}}
                                    ></div>
                                  </div>
                                  <span className="text-sm font-serif font-bold text-slate-600 dark:text-slate-400 w-6">
                                    {count}
                                  </span>
                                </div>
                              </div>
                            )
                          })}
                        </div>
                      </div>
                      
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">‰∫îË°åÈÖçÂêà</h4>
                        <div className="text-center">
                          <Badge variant="outline" className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif px-4 py-2">
                            {result.wuxing_analysis.wuxing_compatibility}
                          </Badge>
                        </div>
                      </div>
                    </div>

                    {/* Âè≥‰æßÔºö‰∫îË°åÂ±ûÊÄßÂ±ïÁ§∫ */}
                    <div className="space-y-6">
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">‰∫îË°åÂ±ûÊÄß</h4>
                        <div className="space-y-4">
                          <div className="text-center p-4 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="text-xs text-slate-500 dark:text-slate-400 mb-2">ÂßìÊ∞è‰∫îË°å</div>
                            <Badge className={`${getWuxingColor(result.wuxing_analysis.surname_wuxing)} text-lg px-4 py-2`}>
                              {result.wuxing_analysis.surname_wuxing}
                            </Badge>
                          </div>
                          <div className="text-center p-4 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="text-xs text-slate-500 dark:text-slate-400 mb-2">ÂêçÂ≠ó‰∫îË°å</div>
                            <div className="flex justify-center space-x-2">
                              {result.wuxing_analysis.given_wuxing.map((wuxing, index) => (
                                <Badge key={index} className={`${getWuxingColor(wuxing)} px-3 py-1`}>
                                  {wuxing}
                                </Badge>
                              ))}
                            </div>
                          </div>
                          <div className="text-center p-4 bg-white dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700">
                            <div className="text-xs text-slate-500 dark:text-slate-400 mb-2">Êï¥‰Ωì‰∫îË°å</div>
                            <Badge className={`${getWuxingColor(result.wuxing_analysis.overall_wuxing)} text-lg px-4 py-2`}>
                              {result.wuxing_analysis.overall_wuxing}
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Êï∞ÁêÜÂàÜÊûê - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    Êï∞ÁêÜÊ†ºÂ±ÄÂàÜÊûê
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="bg-slate-50/50 dark:bg-slate-800/50 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                    <div className="text-center mb-6">
                      <div className="text-sm text-slate-600 dark:text-slate-400 font-serif">‰∫îÊ†ºÊï∞ÁêÜ</div>
                    </div>
                    <div className="grid md:grid-cols-5 gap-6">
                      {Object.entries(result.numerology).filter(([key]) => !key.includes('_fortune')).map(([key, value]) => {
                        const labels = {
                          tiange: 'Â§©Ê†º',
                          dige: 'Âú∞Ê†º',
                          renge: '‰∫∫Ê†º',
                          waige: 'Â§ñÊ†º',
                          zongge: 'ÊÄªÊ†º'
                        }
                        const descriptions = {
                          tiange: 'Á•ñËøê',
                          dige: 'ÂâçËøê',
                          renge: '‰∏ªËøê',
                          waige: 'ÂâØËøê',
                          zongge: 'ÂêéËøê'
                        }
                        const fortuneKey = `${key}_fortune` as keyof typeof result.numerology
                        const fortune = result.numerology[fortuneKey] as string
                        const isMainGe = key === 'renge' // ‰∫∫Ê†ºÊòØ‰∏ªÊ†º
                        
                        return (
                          <div key={key} className="text-center relative">
                            <div className={`bg-white dark:bg-slate-900 p-4 rounded-lg border transition-all duration-200 ${
                              isMainGe 
                                ? 'border-2 border-slate-400 dark:border-slate-500 shadow-md' 
                                : 'border border-slate-200 dark:border-slate-700'
                            }`}>
                              {isMainGe && (
                                <div className="absolute -top-2 left-1/2 transform -translate-x-1/2">
                                  <Badge variant="secondary" className="bg-slate-700 text-white border-0 text-xs px-2 py-0.5">
                                    ‰∏ªÊ†º
                                  </Badge>
                                </div>
                              )}
                              <div className="space-y-2">
                                <div className="text-xs text-slate-500 dark:text-slate-400 font-serif">
                                  {labels[key as keyof typeof labels]}
                                </div>
                                <div className="text-3xl font-serif font-bold text-slate-700 dark:text-slate-300">
                                  {value}
                                </div>
                                <div className="w-8 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                                <Badge className={`${getFortuneColor(fortune)} text-xs px-2 py-1`}>
                                  {fortune}
                                </Badge>
                                <div className="text-xs text-slate-500 dark:text-slate-400 mt-1">
                                  {descriptions[key as keyof typeof descriptions]}
                                </div>
                              </div>
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Èü≥ÈüµÂàÜÊûê - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    Èü≥ÈüµÁâπÁÇπÂàÜÊûê
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-2 gap-8">
                    <div className="space-y-6">
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">Â£∞Ë∞ÉÁªÑÂêà</h4>
                        <div className="flex justify-center space-x-3">
                          {result.phonetics.tones.map((tone, index) => (
                            <div key={index} className="text-center">
                              <div className="w-12 h-12 bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-lg flex items-center justify-center">
                                <span className="text-lg font-serif font-bold text-slate-700 dark:text-slate-300">
                                  {tone}
                                </span>
                              </div>
                              <div className="text-xs text-slate-500 dark:text-slate-400 mt-2">
                                {tone}Ë∞É
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">Èü≥Ë∞ÉÂíåË∞êÂ∫¶</h4>
                        <div className="text-center">
                          <Badge variant="outline" className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif px-4 py-2">
                            {result.phonetics.tone_harmony}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-6">
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">ÂèëÈü≥ÈöæÊòìÂ∫¶</h4>
                        <div className="text-center">
                          <Badge variant="outline" className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif px-4 py-2">
                            {result.phonetics.pronunciation_difficulty}
                          </Badge>
                        </div>
                      </div>
                      
                      <div className="bg-slate-50 dark:bg-slate-800 p-6 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-4 text-center">ÈüµÂæãÁæéÊÑü</h4>
                        <div className="text-center">
                          <Badge variant="outline" className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif px-4 py-2">
                            {result.phonetics.rhyme_quality}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* ÂØìÊÑèÂàÜÊûê‰∏éÊîπËøõÂª∫ËÆÆ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    ÂØìÊÑèÂàÜÊûê‰∏éÊîπËøõÂª∫ËÆÆ
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-2 gap-6">
                    {/* Â∑¶‰æßÔºö‰ºòÂäøÁâπÁÇπ */}
                    <div className="space-y-4">
                      <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">ÁßØÊûÅÂØìÊÑè</h4>
                        <ul className="space-y-2">
                          {result.meanings.positive_meanings.map((meaning, index) => (
                            <li key={index} className="flex items-start text-sm">
                              <div className="w-1.5 h-1.5 bg-green-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                              <span className="text-slate-700 dark:text-slate-300 leading-relaxed">{meaning}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      
                      <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                        <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">ÂßìÂêç‰ºòÂäø</h4>
                        <ul className="space-y-2">
                          {result.suggestions.strengths.map((strength, index) => (
                            <li key={index} className="flex items-start text-sm">
                              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                              <span className="text-slate-700 dark:text-slate-300 leading-relaxed">{strength}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>

                    {/* Âè≥‰æßÔºöÊîπËøõÂª∫ËÆÆ */}
                    <div className="space-y-4">
                      {result.meanings.potential_issues.length > 0 && (
                        <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                          <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">Ê≥®ÊÑè‰∫ãÈ°π</h4>
                          <ul className="space-y-2">
                            {result.meanings.potential_issues.map((issue, index) => (
                              <li key={index} className="flex items-start text-sm">
                                <div className="w-1.5 h-1.5 bg-red-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                                <span className="text-slate-700 dark:text-slate-300 leading-relaxed">{issue}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {result.suggestions.weaknesses.length > 0 && (
                        <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                          <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">ÂæÖÊîπËøõÊñπÈù¢</h4>
                          <ul className="space-y-2">
                            {result.suggestions.weaknesses.map((weakness, index) => (
                              <li key={index} className="flex items-start text-sm">
                                <div className="w-1.5 h-1.5 bg-orange-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                                <span className="text-slate-700 dark:text-slate-300 leading-relaxed">{weakness}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {result.suggestions.improvement_suggestions.length > 0 && (
                        <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                          <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">ÊîπËøõÂª∫ËÆÆ</h4>
                          <ul className="space-y-2">
                            {result.suggestions.improvement_suggestions.map((suggestion, index) => (
                              <li key={index} className="flex items-start text-sm">
                                <div className="w-1.5 h-1.5 bg-purple-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                                <span className="text-slate-700 dark:text-slate-300 leading-relaxed">{suggestion}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* ‰∫∫ÁîüÊåáÂØº - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    ‰∫∫ÁîüÊåáÂØº
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                      <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">ÊúâÂà©Êñπ‰Ωç</h4>
                      <div className="flex flex-wrap gap-2 justify-center">
                        {result.suggestions.lucky_directions.map((direction, index) => (
                          <Badge key={index} variant="outline" className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif">
                            {direction}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                      <h4 className="text-sm font-serif font-semibold text-slate-700 dark:text-slate-300 mb-3 text-center">ÈÄÇÂêàËÅå‰∏ö</h4>
                      <div className="flex flex-wrap gap-2 justify-center">
                        {result.suggestions.suitable_careers.map((career, index) => (
                          <Badge key={index} variant="outline" className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif">
                            {career}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* ÊñáÂåñÂÜÖÊ∂µ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    ÊñáÂåñÂÜÖÊ∂µ
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="bg-slate-50 dark:bg-slate-800 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
                    <ul className="space-y-3">
                      {result.meanings.cultural_connotations.map((connotation, index) => (
                        <li key={index} className="flex items-start">
                          <div className="w-1.5 h-1.5 bg-amber-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                          <span className="text-sm text-slate-700 dark:text-slate-300 leading-relaxed">{connotation}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
              </Card>

              {/* AI‰∏ì‰∏öÂàÜÊûê - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <Card className="mb-6 border border-slate-200 dark:border-slate-700 bg-white/90 dark:bg-slate-900/90">
                <CardHeader className="text-center">
                  <CardTitle className="flex items-center justify-center space-x-3 text-xl font-serif font-bold text-slate-700 dark:text-slate-300 mb-2">
                    <Sparkles className="h-5 w-5" />
                    <span>AIÊô∫ËÉΩËß£ËØª</span>
                  </CardTitle>
                  <div className="w-16 h-px bg-slate-300 dark:bg-slate-600 mx-auto"></div>
                </CardHeader>
                <CardContent>
                  <div className="bg-slate-50/50 dark:bg-slate-800/50 p-8 rounded-lg border border-slate-200 dark:border-slate-700">
                    {renderTraditionalAIContent(result.ai_analysis)}
                  </div>
                </CardContent>
              </Card>

              {/* Êìç‰ΩúÊåâÈíÆ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <div className="text-center space-x-4">
                <Button onClick={handleReset} className="bg-slate-700 dark:bg-slate-600 hover:bg-slate-800 dark:hover:bg-slate-700 text-white font-serif">
                  <User className="h-4 w-4 mr-2" />
                  ÂàÜÊûêÂÖ∂‰ªñÂßìÂêç
                </Button>
                <Button 
                  onClick={handleSaveReport}
                  disabled={isSaving}
                  variant="outline" 
                  className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif"
                >
                  {isSaving ? (
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Download className="h-4 w-4 mr-2" />
                  )}
                  {isSaving ? '‰øùÂ≠ò‰∏≠...' : '‰øùÂ≠òÊä•Âëä'}
                </Button>
                <Button 
                  onClick={handleShareResult}
                  disabled={isSharing}
                  variant="outline" 
                  className="border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 font-serif"
                >
                  {copied ? (
                    <Check className="h-4 w-4 mr-2 text-green-500" />
                  ) : isSharing ? (
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Share2 className="h-4 w-4 mr-2" />
                  )}
                  {copied ? 'Â∑≤Â§çÂà∂' : isSharing ? 'ÂàÜ‰∫´‰∏≠...' : 'ÂàÜ‰∫´ÁªìÊûú'}
                </Button>
              </div>

              {/* ÂàÜ‰∫´ÂõæÁâáÊòæÁ§∫Âå∫Âüü */}
              {showShareImage && shareImageUrl && (
                <div className="mt-8">
                  <Card className="bg-gradient-to-br from-amber-50/90 to-orange-50/90 dark:from-amber-950/20 dark:to-orange-950/20 border-amber-200 dark:border-amber-800/50">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-xl font-serif font-bold text-amber-800 dark:text-amber-200">
                          üìù ÂàÜ‰∫´ÂõæÁâáÂ∑≤ÁîüÊàê
                        </CardTitle>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={handleCloseShareImage}
                          className="text-amber-600 dark:text-amber-400 hover:bg-amber-100 dark:hover:bg-amber-900/30"
                        >
                          ‚úï
                        </Button>
                      </div>
                    </CardHeader>
                    <CardContent className="p-6">
                      <div className="text-center">
                        <p className="text-amber-700 dark:text-amber-300 font-serif mb-6">
                          ÊÇ®ÁöÑÂßìÂêçÂàÜÊûêÂõæÁâáÂ∑≤ÊåâÁÖßÂÆã‰ª£ÁæéÂ≠¶È£éÊ†ºÁîüÊàêÔºåÈÄÇÂêàÂàÜ‰∫´Âà∞Â∞èÁ∫¢‰π¶Á≠âÁ§æ‰∫§Âπ≥Âè∞
                        </p>
                        
                        {/* ÂàÜ‰∫´ÂõæÁâáÈ¢ÑËßà */}
                        <div className="mb-6 flex justify-center">
                          <div className="relative">
                            <Image 
                              src={shareImageUrl} 
                              alt="ÂßìÂêçÂàÜÊûêÂàÜ‰∫´ÂõæÁâá" 
                              width={384}
                              height={384}
                              className="max-w-sm w-full h-auto rounded-lg shadow-lg border border-amber-200 dark:border-amber-700"
                            />
                            <div className="absolute -top-3 -right-3 bg-amber-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                              üìù
                            </div>
                          </div>
                        </div>
                        
                        {/* Êìç‰ΩúÊåâÈíÆ */}
                        <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                          <Button
                            onClick={handleDownloadShareImage}
                            className="bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 text-white font-serif px-6 py-2"
                          >
                            <Download className="h-4 w-4 mr-2" />
                            ‰∏ãËΩΩÂõæÁâá
                          </Button>
                          <p className="text-sm text-amber-600 dark:text-amber-400 font-serif">
                            Âª∫ËÆÆ‰øùÂ≠òÂà∞Áõ∏ÂÜåÂêéÂàÜ‰∫´Âà∞Á§æ‰∫§Âπ≥Âè∞
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* ÂéÜÂè≤ËÆ∞ÂΩïÊèêÁ§∫ - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
              <div className="mt-6">
                <Card className="bg-amber-50/50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-800/50">
                  <CardContent className="p-5 text-center">
                    <div className="flex items-center justify-center space-x-3 mb-3">
                      <div className="w-8 h-8 bg-amber-100 dark:bg-amber-900/50 rounded-full flex items-center justify-center">
                        <User className="h-4 w-4 text-amber-600 dark:text-amber-400" />
                      </div>
                      <h3 className="text-base font-serif font-semibold text-amber-800 dark:text-amber-200">
                        ÂàÜÊûêÂ∑≤‰øùÂ≠ò
                      </h3>
                    </div>
                    <p className="text-sm text-amber-700 dark:text-amber-300 font-serif mb-3">
                      Êú¨Ê¨°ÂßìÂêçÂàÜÊûêÁªìÊûúÂ∑≤Ëá™Âä®‰øùÂ≠òÂà∞ÊÇ®ÁöÑÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÔºåÊÇ®ÂèØ‰ª•ÈöèÊó∂Êü•ÁúãÂíåÂõûÈ°æÊâÄÊúâÂàÜÊûêÁªìÊûú„ÄÇ
                    </p>
                    <Link href="/history">
                      <Button variant="outline" className="border-amber-300 dark:border-amber-700 text-amber-700 dark:text-amber-300 hover:bg-amber-100 dark:hover:bg-amber-900/30 font-serif text-sm">
                        <BookOpen className="h-4 w-4 mr-2" />
                        Êü•ÁúãÂéÜÂè≤ËÆ∞ÂΩï
                      </Button>
                    </Link>
                  </CardContent>
                </Card>
              </div>
            </section>
          )}
        </div>
      </main>

      {/* Footer - ÂÆã‰ª£ÁæéÂ≠¶È£éÊ†º */}
      <footer className="border-t border-slate-200 dark:border-slate-700 bg-slate-50/90 dark:bg-slate-900/90 backdrop-blur-sm mt-16 relative">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center text-slate-600 dark:text-slate-400">
            <p className="font-serif">&copy; 2024 Â§©Êú∫AI. ‰º†ÁªüÊô∫ÊÖßÔºåÁé∞‰ª£ÁßëÊäÄ</p>
          </div>
        </div>
      </footer>
      </div>
    </div>
  )
}